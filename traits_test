#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
TritsUI interface for PyBP



AS
"""

# Enthought imports.

from traits.api import HasTraits, Instance, Button, File
from traitsui.api import View, Item, MenuBar, Menu, Action, Separator, \
                         CloseAction, HGroup, VGroup
from traitsui.file_dialog import open_file, TextInfo

from pyface.api import FileDialog, OK
from tvtk.pyface.scene_editor import SceneEditor

from mayavi.tools.mlab_scene_model import MlabSceneModel
from mayavi.core.ui.mayavi_scene import MayaviScene

import time

# My actual tools
from PyBP import *


class ActorViewer(HasTraits):

    # The scene model.
    scene = Instance(MlabSceneModel, ())

    ######################
    # Using 'scene_class=MayaviScene' adds a Mayavi icon to the toolbar,
    # to pop up a dialog editing the pipeline.
    view = View(Item(name='scene',
                     editor=SceneEditor(scene_class=MayaviScene),
                     show_label=False,
                     resizable=True,
                     height=1000,
                     width=1000),
                menubar=MenuBar(
                    Menu(Action(name="Load Gifti", action="opengifti"), # see Controller for
                         Action(name="Inflate Gii", action="inflategii"),
                         Action(name="Load Overlay", action="loadoverlay"), # these callbacks
                         Action(name="Load Network", action="loadnetwork"),
                         Action(name="Load Network And Overlay!", action="loadall"),
                         Separator(),
                         CloseAction,
                         name="File"),
                         ),
                title="ByBP: AAL90 Brain Plotter",
                resizable=True
                )

    def __init__(self, **traits):
        HasTraits.__init__(self, **traits)
        self.DoTemplate()
        
    def DoTemplate(self):
        v,f = template()
        self.DoPlot(v,f)
        
    def DoPlot(self,v,f):
        
        pts = self.scene.mlab.triangular_mesh(v[:,0], v[:,1], v[:,2], f,color=(1,1,1),opacity=0.3)
        self.scene.mlab.get_engine().scenes[0].scene.x_plus_view()
        #self.scene.mlab.view(0., 0.)
        
    def opengifti(self):
        G = GetGifti()
        docontinue = False
        G.configure_traits()
        while docontinue != True:
            try:
                docontinue = G.docontinue
            except:
                docontinue = False
                time.sleep(10)
        print('Continuing')
        
    def inflategii(self):
        iG = GetGiftiInflate()
        iG.configure_traits()
    
    def loadoverlay(self):
        
        o = LoadOverlay90()
        o.configure_traits()
        
    def loadnetwork(self):
        
        n = LoadNetwork90()
        n.configure_traits()
        
    def loadall(self):
        
        a = LoadAll()
        a.configure_traits()

# Load gifti by popup dialog
#------------------------------------------------------------------
class GetGifti(HasTraits):
    
    txt_file_name = File
    openTxt = Button('Open...')
    traits_view = View( 
        VGroup( 
            HGroup(
              Item( 'openTxt', show_label = False ),
              '_',
              Item( 'txt_file_name', style = 'readonly', width = 200 ),
            ),
        ),
        title="Select Gifti",
        )
    def _openTxt_fired(self):
        """ Handles the user clicking the 'Open...' button.
        """
        inflate = False
        self.docontinue = False
        extns = ['*.gii',]#seems to handle only one extension...
        wildcard='|'.join(extns)

        dialog = FileDialog(title='Select gifti surface',
            action='open', wildcard=wildcard,
             default_path = self.txt_file_name)
        if dialog.open() == OK:
            self.txt_file_name = dialog.path
            path = self.openTxtFile(dialog.path,inflate)     
            self.path = path
        return self

    def openTxtFile(self, path,inflate):
        self.docontinue = True
        return self
#        gifti = path
#        str = "\nUsing surface gifti: %s\n" % gifti
#        print(str)
#        self.v,self.f = GetMesh(gifti)
#        
#        if inflate == True:
#            printf("Inflating")
#            v = inflate(v,f)
#            self.v = v
#        
#        self.gifti = gifti
#        
#        # spawn?
#        a = ActorViewer()
#        a.configure_traits()
#        a.v = self.v
#        a.f = self.f
#        a.DoPlot(self.v,self.f)
        
# Load gifti by popup dialog AND INFLATE![same code]
#------------------------------------------------------------------
class GetGiftiInflate(HasTraits):
    #inflate = True
    txt_file_name = File
    openTxt = Button('Open...')
    traits_view = View( 
        VGroup( 
            HGroup(
              Item( 'openTxt', show_label = False ),
              '_',
              Item( 'txt_file_name', style = 'readonly', width = 200 ),
            ),
        ),
        title="Select Gifti",
        )
    def _openTxt_fired(self):
        """ Handles the user clicking the 'Open...' button.
        """
        inflate = True
        extns = ['*.gii',]#seems to handle only one extension...
        wildcard='|'.join(extns)

        dialog = FileDialog(title='Select gifti surface',
            action='open', wildcard=wildcard,
             default_path = self.txt_file_name)
        if dialog.open() == OK:
            self.txt_file_name = dialog.path
            path = self.openTxtFile(dialog.path,inflate)     
            self.path = path
            return self
    def openTxtFile(self, path,inflate):
        
        gifti = path
        str = "\nUsing surface gifti: %s\n" % gifti
        print(str)
        self.v,self.f = GetMesh(gifti)
        
        if inflate == True:
            printf("Inflating")
            v = inflate(v,f)
            self.v = v
        
        self.gifti = gifti
        
        # spawn?
        a = ActorViewer()
        a.configure_traits()
        a.v = self.v
        a.f = self.f
        a.DoPlot(self.v,self.f)    

if __name__ == '__main__':
    a = ActorViewer()
    a.configure_traits()